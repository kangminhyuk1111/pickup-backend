plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
}

version = '0.0.2-SNAPSHOT'
group = 'core'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // DB
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // https://mvnrepository.com/artifact/org.springframework.security/spring-security-crypto
    implementation 'org.springframework.security:spring-security-crypto:6.2.2'

    // jjwt
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    // test
    testImplementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    testImplementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
    testImplementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    // fcm
    implementation 'com.google.firebase:firebase-admin:9.2.0'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
}

tasks.named('bootJar') {
    doFirst {
        def resourcesDir = sourceSets.main.resources.srcDirs.find()
        def prodFile = new File(resourcesDir, 'application-prod.yml')
        def defaultFile = new File(resourcesDir, 'application.yml')

        if (!prodFile.exists()) {
            throw new GradleException("""
                ======================================================================
                빌드 실패: application-prod.yml 파일이 없습니다.
                src/main/resources 디렉토리에 application-prod.yml 파일을 생성해주세요.
                ======================================================================
            """.stripIndent())
        }

        // application.yml 파일의 spring.profiles.active가 prod인지 확인
        if (defaultFile.exists()) {
            def content = defaultFile.text
            if (!content.contains('active: prod')) {
                throw new GradleException("""
                    ======================================================================
                    빌드 실패: application.yml의 활성 프로파일이 prod가 아닙니다.
                    application.yml 파일에 다음 설정을 추가해주세요:
                    
                    spring:
                      profiles:
                        active: prod
                    ======================================================================
                """.stripIndent())
            }
        }

        println "✓ Production 프로파일 검증 완료"
    }
}

// 빌드 시 자동으로 prod 프로파일 적용
tasks.named('bootRun') {
    args = ["--spring.profiles.active=prod"]
}

tasks.named('test') {
    useJUnitPlatform()
}
